123
43
54
12
76
84
98
678
543
231

def prime(number):
    flag = False
    if number == 1:
        print(number, "is not a prime number")
    elif number > 1:
        # check for factors
        for i in range(2, number):
            if (number % i) == 0:
                # if factor is found, set flag to True
                flag = True
                # break out of loop
                break
        # check if flag is True
        if flag:
            print(number, "is not a prime number")
        else:
            print(number, "is a prime number")
            return 'prime'



max_value = max(number_of_prime_q)
max_index = number_of_prime_q.index(max_value)
print(max_index, type(max_index))
print(num_list[max_index])
list_of_numbers_with_max_pq.append(num_list[max_index])
print(list_of_numbers_with_max_pq)
number_of_prime_q = number_of_prime_q[max_index+1:]
print(number_of_prime_q)

--------------
num_list = []
test = []
counter = 0
counter_pq = 0
p_list =[]
for i in range(0, 10):
    num_list.append(int(input()))

for number in num_list:
    for index in range(1, number+1):
        quotient, remainder = divmod(number, index)
        if remainder == 0:
            counter += 1  # found a quotient for number
            print(quotient)
            # check if its prime too
            for p in range(1, quotient+1):
                if quotient % p == 0:  # 1 < p < quotient+1
                    p_list.append(p)
            if p_list[0] == 1 and p_list[1] == quotient:
                # quotient is prime
                counter_pq += 1
    print(f'number of quotients for {number} is: {counter}')
    print(f'number of prime quotients for {number} is: {counter_pq}')
    counter = 0
    counter_pq = 0

------------

num_list = []
test = []
counter = 0
counter_pq = 0
flag = 0

for i in range(0, 10):
    num_list.append(int(input()))

for number in num_list:
    for index in range(1, number+1):
        quotient, remainder = divmod(number, index)
        if remainder == 0:
            counter += 1  # found a quotient for number
            print(quotient)
            # check if its prime too
            for p in range(2, quotient):
                if quotient % p == 0:
                    flag = 1
                    break
            if flag == 0:
                counter_pq += 1

    print(f'number of quotients for {number} is: {counter}')
    print(f'number of prime quotients for {number} is: {counter_pq}')
    counter = 0
    counter_pq = 0
--------------



